Jive.0001.encoding.property=utf-8
Jive.0002.nocomment.filter=com.atlassian.uwc.converters.jive.filters.NoCommentFilter
## Exclude documents that came from user containers. 
#Jive.0002.onlyblogsfromusercontainer.filter=com.atlassian.uwc.converters.jive.filters.UserContainerFilter
## Exclude or Include pages based on tags
## filterbytag-includeregex : if used, only pages with tags that match the include filter will be allowed. This is a global property and will be applied on all pages.
## filterbytag-excluderegex : if used, only pages with tags that do not match the exclude filter will be allowed. This is a global property and will be applied on all pages.
## filterbytag-includeregex-SPACEKEY : if used, pages that have this spacekey (as set in the spacemap properties below) will use this include filter in place of the global filter. It acts as an override filter. So if both are in place, this one takes precedence.
## filterbytag-excluderegex-SPACEKEY : if used, pages that have this spacekey (as set in the spacemap properties below) will use this exclude filter in place of the global filter. It acts as an override filter. So if both are in place, this one takes precedence.
## NOTE: You can have either a global include or global exclude filter or neither, and for any space you can have either an include or exclude filter. If you do not have a global filter, you can still have a space override filter. 
## NOTE: Spacekeys as defined in the spacemap and in these filter properties will be case sensitive, so make certain they are the same. 
#Jive.0002.filterbytag.filter=com.atlassian.uwc.converters.jive.filters.TagFilter
#Jive.0002.filterbytag-includeregex.property=^migrate$
#Jive.0002.filterbytag-excluderegex.property=exclude
#Jive.0002.filterbytag-includeregex-SPACEKEY.property=^overrideinclude$
#Jive.0002.filterbytag-excluderegex-testconf.property=^overrideexclude$
Jive.0003.xmlevents.property=com.atlassian.uwc.converters.xml.DefaultXmlEvents
Jive.0003.xml-fragments.property=true
Jive.0003.xml-fragments-root.property=html
## Html Tidy - Turn this option on to automatically correct malformed html/xml
Jive.0003.xml-use-htmltidy.property=true
## Html Tidy Options
##           - set JTidy options using the following naming convention:
##           - xml-tidyopt-key.property=val
##           - where key is any supported JTidy key listed here:
##             http://www.docjar.com/docs/api/org/w3c/tidy/Tidy.html
##             but using the property naming convention listed here:
##             http://tidy.sourceforge.net/docs/quickref.html 
##           - and value is one of the options described here:
##             http://tidy.sourceforge.net/docs/quickref.html
##           - Example. To turn on numeric-entities, uncomment:
Jive.0003.xml-tidyopt-numeric-entities.property=true
## User Date Metadata - Uncomment these if you want the UWC to convert
## optionally exportable user and timestamp metadata
## change the users-must-exist property to true if you want the 
## framework to check if the username is an existing confluence user before
## setting the metadata.
## Requires UDMF Plugin https://studio.plugins.atlassian.com/wiki/display/udmf
Jive.0004.userdate.class=com.atlassian.uwc.converters.jive.UserDateConverter
Jive.0004.users-must-exist.property=false
## Repeated basic tags
Jive.0050.emrepeat.java-regex=(<em>\s*){2,}{replace-with}$1
Jive.0051.prerepeat.java-regex=(<pre[^>]*>\s*){2,}{replace-with}$1
Jive.0052.strongrepeat.java-regex=(<strong>\s*){2,}{replace-with}$1
Jive.0053.emrepeatend.java-regex=(<\/em>\s*){2,}{replace-with}$1
Jive.0054.prerepeatend.java-regex=(<\/pre>\s*){2,}{replace-with}$1
Jive.0055.strongrepeatend.java-regex=(<\/strong>\s*){2,}{replace-with}$1
## Lots of different pre and CDATA and code syntaxes
Jive.0090-re_pre.class=com.atlassian.uwc.converters.jive.PreConverter
Jive.0095-re_code.java-regex-tokenizer=(?s)<code>(.*?)<\/code>{replace-with}{code}$1{code}
Jive.0096-re_code.java-regex-tokenizer=(?s)([{]code[^}]*[}].*?[{]code[}]){replace-with}$1
## Title
Jive.0200.title.class=com.atlassian.uwc.converters.jive.TitleConverter
## Escape brackets -- after tokenizing code blocks, and title handling. 
##							 And before we make links
Jive.0210.escapebrackets.java-regex=([\[\]]){replace-with}\\$1
## Detect blogs
Jive.0225.blog.class=com.atlassian.uwc.converters.jive.BlogConverter
## Space
Jive.0250.space.class=com.atlassian.uwc.converters.jive.SpaceConverter
Jive.0250.spacemap-200-600.property=testconf
Jive.0250.spacemap-201-14.property=testconf2
Jive.0250.spacemap-202-14.property=testconf3
Jive.0250.spacedata.property=/Users/laura/Code/Subversion/uwc-spac/devel/sampleData/jive/junit_resources/exported_jive_containerdata.txt
## Comments
Jive.0275.comment.class=com.atlassian.uwc.converters.jive.CommentConverter
## Tags 
Jive.0300.tags.class=com.atlassian.uwc.converters.jive.TagConverter
## Table of Contents. Must be handled before images
Jive.0410.toc.java-regex-tokenizer=<((img)|(span)) __jive_macro_name=.toc.[^>]*?((\/>)|(><\/span>)){replace-with}{toc}
## Images - doing this with regex as no nesting and simpler. 
## handles the inline image syntax and links to attachments
## requires attachmentdata property below
Jive.0450.image.class=com.atlassian.uwc.converters.jive.ImageConverter
## Attachments - attaches the files to the page
Jive.0500.attachments.class=com.atlassian.uwc.converters.jive.AttachmentConverter
Jive.0500.attachmentdata.property=/Users/laura/Code/Subversion/uwc-spac/devel/sampleData/jive/junit_resources/exported_jive_attachments.txt
## Url report 2, needs to be before we remove metadata. Optional. Provides
## a before/after report of where a jive page ended up in confluence
#Jive.0590.urlreport2.class=com.atlassian.uwc.converters.jive.UrlReport2
## Remove metadata - Wait to do this until after space, blog, tags, comments, 
## and attachments have been handled. also urlreport2
Jive.0600.removemetadata.java-regex=\{jive-export-meta.*?\}{replace-with}
Jive.0601.removeuserimtestamp.java-regex=\{user[^}]*\}{replace-with}
Jive.0602.removeuserimtestamp.java-regex=\{timestamp[^}]*\}{replace-with}
Jive.0603.removetag.java-regex=\{tags:[^}]*\}{replace-with}
Jive.0604.removeextranl.java-regex=(?m)\n{2,}{replace-with}
## Syntaxes that should be run before the XmlConverter
## Escape Braces - needs to be run _after_ we've removed the metadata syntax
## also after we've tokenized code and pre blocks. Any macros that have to be
## handled before this (like toc) will need to be tokenized.
Jive.0700.escapebraces.java-regex=([{}]){replace-with}\\$1
# Internal Links - should be after attachment handling
Jive.0730.internaljivelink.class=com.atlassian.uwc.converters.jive.InternalLinkConverter
Jive.0730.internaljivedomain.property=http://wiki.abc.com
Jive.0730.targetconfdomain.property=http://confluence.abc.com
Jive.0730.titledata.property=/path/to/titledata/set/from/exported/output/properties
Jive.0800.cleantable.java-regex=<(\/?)table[^>]*>{replace-with}<$1table>
Jive.0801.cleantable.java-regex=<(\/?)tr[^>]*>{replace-with}<$1tr>
Jive.0802.cleantable.java-regex=<(\/?)td[^>]*>{replace-with}<$1td>
Jive.0803.cleantable.java-regex=<(\/?)th[^>]*>{replace-with}<$1th>
## HTML: prep for the sax parser
Jive.1400.amp-entity.java-regex=[&](?![#a-zA-Z0-9]{2,5};){replace-with}&amp;
Jive.1450.break.java-regex=<br\/?>{replace-with}NEWLINE
## Optional: Any pages having parsing errors because of non-html xml tags
## that weren't protected by pre blocks? Uncomment this converter and replace
## "customtag" with the names of your tags 
#Jive.1455.rawnonhtmlxml.java-regex=<((custom)|(nonhtml)|(xml)|(tag))>{replace-with}&lt;$1&gt;
Jive.1501.basic.xmlevent={tag}b,i,strong,em,u,s,blockquote,br{class}com.atlassian.uwc.converters.xml.BasicParser
Jive.1505.monospace.xmlevent={tag}tt{class}com.atlassian.uwc.converters.xml.MonoParser
Jive.1506.header.xmlevent={tag}h1, h2, h3, h4, h5, h6{class}com.atlassian.uwc.converters.xml.HeaderParser
Jive.1507.lists.xmlevent={tag}ol,ul,li{class}com.atlassian.uwc.converters.xml.ListParser
Jive.1508.horizrule.xmlevent={tag}hr{class}com.atlassian.uwc.converters.xml.HorizRuleParser
## If you want confluence tables output, use SimpleTableParser, or if you
## want content formatting plugin output, use ContentFormattingTableParser
#Jive.1509.table.xmlevent={tag}table,tr,td{class}com.atlassian.uwc.converters.xml.SimpleTableParser
Jive.1509.table.xmlevent={tag}table,tr,td,th{class}com.atlassian.uwc.converters.xml.ContentFormattingTableParser
Jive.1510.para.xmlevent={tag}p{class}com.atlassian.uwc.converters.xml.BreakParser
Jive.1511.link.xmlevent={tag}a{class}com.atlassian.uwc.converters.xml.LinkParser
## HTML: Parse the xml document
Jive.1585.prepnotext.java-regex=^\s*${replace-with}<body><p/></body>
Jive.1590.xmlconverter.class=com.atlassian.uwc.converters.xml.XmlConverter
## Post XmlConverter processing
#Jive.1600.addtableclass.java-regex=\{table[^}]+\}{replace-with}{table:class=mig-table}
## For any tokenizer regex above, strip out tokens
Jive.2000-detokenize.class=com.atlassian.uwc.converters.DetokenizerConverter
